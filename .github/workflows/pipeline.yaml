name: CI

on:
  push:
    branches: [main]


permissions:
  contents: write  # Grants write permission to the `GITHUB_TOKEN`

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Start Redis
        run: docker run -d --name redis-for-tests -p 6379:6379 redis

      - name: Run tests
        run: npm run test:ci

      - name: Stop Redis
        run: docker stop redis-for-tests && docker rm redis-for-tests

      - name: Determine version bump
        id: version_bump
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
  
          # Determine if there are any commit messages that indicate a major or minor bump
          COMMITS=$(git log --format=%B -n 10)
          if echo "$COMMITS" | grep -q 'BREAKING CHANGE:'; then
            BUMP="major"
          elif echo "$COMMITS" | grep -q 'feat:'; then
            BUMP="minor"
          else
            BUMP="patch"
          fi
  
          # Bump the version using npm version
          NEW_VERSION=$(npm version $BUMP --no-git-tag-version)
          echo "New version: $NEW_VERSION"
          echo "::set-output name=new_version::$NEW_VERSION"
          echo "::set-output name=bump_type::$BUMP"
  
      - name: Commit and push version bump
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git commit -am "chore(release): bump version to ${{ steps.version_bump.outputs.new_version }}"
          git push origin main
  
      - name: Publish to npm (only for major/minor bumps)
        if: steps.version_bump.outputs.bump_type != 'patch'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}